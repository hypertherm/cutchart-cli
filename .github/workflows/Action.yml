name: Build and Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]      

jobs:
  build:
    
    runs-on: windows-latest

    steps: 
    - uses: actions/checkout@v2.2.0
    
    - name: Fetch all history for all tags and branches
      run: git fetch --prune --unshallow
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.3
      with:
          versionSpec: '5.2.x'
    - name: Use GitVersion
      id: gitversion # step id used as reference for output values
      uses: gittools/actions/gitversion/execute@v0.9.3
    - name: Print GitVersion computed
      run: |
        echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
    
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.5.0
      with:
        dotnet-version: 2.1
    
    - name: Define Authentication
      shell: bash
      env:
        CLIENT_ID: ${{ secrets.ClientID }}
        
      run: |
        cat <<EOF > ./cc-cli/authconfig.json
        { "ClientID": "$CLIENT_ID" }
        EOF
      
    - name: Define Analytics
      shell: bash
      env:
        StorageSaltString: ${{ secrets.STORAGESALTSTRING }}
        StoragePassword: ${{ secrets.STORAGEPASSWORD }}
        InstrumentationKey: ${{ secrets.INSTRUMENTATIONKEY }}        
      run: |
        cat <<EOF > ./cc-cli/appsettings.json
        { "StorageSaltString": "$StorageSaltString",
        "StoragePassword": "$StoragePassword",
        "InstrumentationKey": "$InstrumentationKey"}
        EOF

    - name: Build
      run: dotnet build --configuration release -p:Version="${{ steps.gitversion.outputs.assemblySemVer }}"
    - name: Test - xUnit
      run: dotnet test
    
    - name: Install Dotnet -Warp
      run: dotnet tool install -g dotnet-warp 
    
    - name: Warp Project
      run: dotnet warp .\cc-cli\cc-cli.csproj

    - name: Code sign a file
      uses: dlemstra/code-sign-action@v1
      with:
        certificate: '${{ secrets.CERTIFICATE }}'
        folder: ./

    - name: Create a Release
      if: ${{ github.event.action == 'merged' }}
      uses: actions/create-release@v1.1.1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.gitversion.outputs.assemblySemVer }}
        release_name: Version ${{ steps.gitversion.outputs.assemblySemVer }}
    
  
